package com.example.aagnar.presentation.ui.settings

import android.content.Context
import android.os.Bundle
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import android.widget.Button
import android.widget.EditText
import android.widget.TextView
import android.widget.Toast
import androidx.fragment.app.Fragment
import androidx.lifecycle.lifecycleScope
import androidx.recyclerview.widget.RecyclerView
import com.example.aagnar.R
import com.example.aagnar.util.PerformanceMonitor
import dagger.hilt.android.AndroidEntryPoint
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.launch
import kotlinx.coroutines.withContext
import kotlinx.coroutines.delay
import java.net.Socket
import java.net.InetSocketAddress
import javax.inject.Inject

@AndroidEntryPoint
class SettingsFragment : Fragment() {

    @Inject
    lateinit var performanceMonitor: PerformanceMonitor
    private lateinit var settingsRecyclerView: RecyclerView

    override fun onCreateView(
        inflater: LayoutInflater,
        container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View {
        return performanceMonitor.measure("SettingsFragment.onCreateView") {
            inflater.inflate(R.layout.fragment_settings, container, false)
        }
    }

    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
        super.onViewCreated(view, savedInstanceState)

        performanceMonitor.measure("SettingsFragment.onViewCreated") {
            initViews(view)
            setupServerRegistration()
            loadSavedUserData() // ‚Üê –ó–ê–ì–†–£–ñ–ê–ï–ú –°–û–•–†–ê–ù–ï–ù–ù–´–ï –î–ê–ù–ù–´–ï
        }
    }

    private fun initViews(view: View) {
        settingsRecyclerView = view.findViewById(R.id.settingsRecyclerView)
    }

    private fun loadSavedUserData() {
        val prefs = requireContext().getSharedPreferences("user", Context.MODE_PRIVATE)

        val usernameInput = view?.findViewById<EditText>(R.id.usernameInput)
        val nicknameInput = view?.findViewById<EditText>(R.id.nicknameInput)

        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–∫—Ä–æ–º–µ –ø–∞—Ä–æ–ª—è)
        usernameInput?.setText(prefs.getString("username", ""))
        nicknameInput?.setText(prefs.getString("nickname", ""))
    }

    private fun setupServerRegistration() {
        val prefs = requireContext().getSharedPreferences("user", Context.MODE_PRIVATE)
        val registrationClient = com.example.aagnar.data.remote.RegistrationClient()

        // –ö–Ω–æ–ø–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–µ—Ä–≤–µ—Ä–æ–≤
        val checkServersButton = view?.findViewById<Button>(R.id.checkServersButton)
        checkServersButton?.setOnClickListener {
            checkServerStatus()
        }

        // –ö–Ω–æ–ø–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        val registerButton = view?.findViewById<Button>(R.id.registerButton)
        registerButton?.setOnClickListener {
            val usernameInput = view?.findViewById<EditText>(R.id.usernameInput)
            val nicknameInput = view?.findViewById<EditText>(R.id.nicknameInput)
            val passwordInput = view?.findViewById<EditText>(R.id.passwordInput)

            val username = usernameInput?.text?.toString()?.trim() ?: ""
            val nickname = nicknameInput?.text?.toString()?.trim() ?: ""
            val password = passwordInput?.text?.toString() ?: ""

            if (username.isEmpty()) {
                usernameInput?.error = "–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω"
                return@setOnClickListener
            }

            if (password.isEmpty()) {
                passwordInput?.error = "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å"
                return@setOnClickListener
            }

            lifecycleScope.launch {
                registerButton.isEnabled = false
                registerButton.text = "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è..."

                try {
                    val result = registrationClient.register(username, password, nickname)

                    if (result.contains("success")) {
                        // –°–û–•–†–ê–ù–Ø–ï–ú –î–ê–ù–ù–´–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø
                        prefs.edit()
                            .putString("username", username)
                            .putString("nickname", if (nickname.isNotEmpty()) nickname else username)
                            .putString("password", password) // TODO: –ó–∞—Ö–µ—à–∏—Ä–æ–≤–∞—Ç—å –ø–æ–∑–∂–µ
                            .putBoolean("registered", true)
                            .apply()

                        showMessage("‚úÖ –£—Å–ø–µ—à–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ")

                        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
                        val statusText = view?.findViewById<TextView>(R.id.registrationStatus)
                        statusText?.text = "üü¢ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∫–∞–∫: $username"
                    } else {
                        showMessage("‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: $result")
                    }
                } catch (e: Exception) {
                    showMessage("‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: ${e.message}")
                } finally {
                    registerButton.isEnabled = true
                    registerButton.text = "–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ"
                }
            }
        }

        // –°—Ç–∞—Ç—É—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        updateRegistrationStatus()
    }

    private fun updateRegistrationStatus() {
        val prefs = requireContext().getSharedPreferences("user", Context.MODE_PRIVATE)
        val statusText = view?.findViewById<TextView>(R.id.registrationStatus)

        if (prefs.getBoolean("registered", false)) {
            val username = prefs.getString("username", "")
            val nickname = prefs.getString("nickname", "")
            val displayName = if (!nickname.isNullOrEmpty()) "$username ($nickname)" else username
            statusText?.text = "üü¢ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∫–∞–∫: $displayName"
        } else {
            statusText?.text = "üî¥ –ù–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω"
        }
    }

    private fun checkServerStatus() {
        lifecycleScope.launch {
            val checkServersButton = view?.findViewById<Button>(R.id.checkServersButton)
            checkServersButton?.isEnabled = false
            checkServersButton?.text = "–ü—Ä–æ–≤–µ—Ä–∫–∞..."

            try {
                val webSocketOk = checkWebSocketServer()
                val tcpOk = checkTcpServer()

                updateServerStatusUI(webSocketOk, tcpOk)
            } catch (e: Exception) {
                updateServerStatusUI(false, false)
            } finally {
                checkServersButton?.isEnabled = true
                checkServersButton?.text = "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–µ—Ä–≤–µ—Ä—ã"
            }
        }
    }

    private suspend fun checkWebSocketServer(): Boolean {
        return withContext(Dispatchers.IO) {
            try {
                val client = okhttp3.OkHttpClient()
                val request = okhttp3.Request.Builder()
                    .url("ws://192.168.88.240:8889")
                    .build()
                val webSocket = client.newWebSocket(request, object : okhttp3.WebSocketListener() {})
                delay(1000)
                webSocket.close(1000, null)
                true
            } catch (e: Exception) {
                false
            }
        }
    }

    private suspend fun checkTcpServer(): Boolean {
        return withContext(Dispatchers.IO) {
            try {
                val socket = Socket()
                socket.connect(InetSocketAddress("192.168.88.240", 8887), 3000)
                socket.close()
                true
            } catch (e: Exception) {
                false
            }
        }
    }

    private fun updateServerStatusUI(webSocketOk: Boolean, tcpOk: Boolean) {
        val webSocketStatus = view?.findViewById<TextView>(R.id.webSocketStatus)
        val tcpStatus = view?.findViewById<TextView>(R.id.tcpStatus)

        webSocketStatus?.text = "WebSocket: ${if (webSocketOk) "üü¢" else "üî¥"}"
        tcpStatus?.text = "TCP: ${if (tcpOk) "üü¢" else "üî¥"}"
    }

    private fun showMessage(message: String) {
        Toast.makeText(requireContext(), message, Toast.LENGTH_SHORT).show()
    }

    override fun onResume() {
        super.onResume()
        performanceMonitor.logPerformanceEvent("SettingsFragment resumed")
        // –ü—Ä–∏ –∫–∞–∂–¥–æ–º –æ—Ç–∫—Ä—ã—Ç–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        updateRegistrationStatus()
    }
}