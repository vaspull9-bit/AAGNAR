Index: app/src/main/java/com/example/aagnar/MainActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>//AAGNAR  v4.2.1\r\npackage com.example.aagnar\r\n\r\nimport android.content.Intent\r\nimport android.os.Bundle\r\nimport android.view.MenuItem\r\nimport android.view.View\r\nimport android.widget.ImageButton\r\nimport android.widget.LinearLayout\r\nimport android.widget.Toast\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport androidx.appcompat.widget.Toolbar\r\nimport androidx.core.view.GravityCompat\r\nimport androidx.drawerlayout.widget.DrawerLayout\r\nimport androidx.fragment.app.Fragment\r\nimport androidx.lifecycle.lifecycleScope\r\nimport com.example.aagnar.presentation.adapter.MainPagerAdapter\r\nimport com.example.aagnar.presentation.ui.settings.SettingsFragment\r\nimport com.example.aagnar.util.PerformanceMonitor\r\nimport com.google.android.material.navigation.NavigationView\r\nimport com.google.android.material.tabs.TabLayout\r\nimport com.google.android.material.tabs.TabLayoutMediator\r\nimport dagger.hilt.android.AndroidEntryPoint\r\nimport kotlinx.coroutines.Dispatchers\r\nimport kotlinx.coroutines.launch\r\nimport kotlinx.coroutines.withContext\r\nimport kotlinx.coroutines.delay\r\nimport java.net.Socket\r\nimport java.net.InetSocketAddress\r\nimport android.content.Context  // ← ДОБАВЬТЕ ЭТУ СТРОКУ\r\n\r\n@AndroidEntryPoint\r\nclass MainActivity : AppCompatActivity(), NavigationView.OnNavigationItemSelectedListener {\r\n\r\n    private lateinit var drawerLayout: DrawerLayout\r\n    private lateinit var navigationView: NavigationView\r\n    private lateinit var tabLayout: TabLayout\r\n    private lateinit var viewPager: androidx.viewpager2.widget.ViewPager2\r\n    private lateinit var toolbar: Toolbar\r\n    private lateinit var menuButton: ImageButton\r\n    private lateinit var searchButton: ImageButton\r\n    private lateinit var addContactButton: ImageButton\r\n\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n\r\n        // \uD83D\uDD25 ПРОВЕРКА СЕССИИ - ДОБАВИТЬ ЭТИ 6 СТРОК\r\n        val sessionPrefs = getSharedPreferences(\"session\", Context.MODE_PRIVATE)\r\n        if (!sessionPrefs.getBoolean(\"logged_in\", false)) {\r\n            startActivity(Intent(this, AccountSelectionActivity::class.java))\r\n            finish()\r\n            return\r\n        }\r\n\r\n        setContentView(R.layout.activity_main)\r\n\r\n        initViews()\r\n        setupViewPager()\r\n        setupNavigation()\r\n        checkServerStatus() // ← ДОБАВИТЬ проверку статуса серверов\r\n    }\r\n\r\n    private fun checkServerStatus() {\r\n        lifecycleScope.launch {\r\n            try {\r\n                val webSocketOk = checkWebSocketServer()\r\n                val tcpOk = checkTcpServer()\r\n\r\n                updateStatusIndicators(webSocketOk, tcpOk)\r\n\r\n                // Автоматическая регистрация если серверы доступны\r\n                if (webSocketOk && tcpOk) {\r\n                    autoRegisterIfNeeded()\r\n                }\r\n            } catch (e: Exception) {\r\n                updateStatusIndicators(false, false)\r\n            }\r\n        }\r\n    }\r\n\r\n    private suspend fun checkWebSocketServer(): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                val client = okhttp3.OkHttpClient()\r\n                val request = okhttp3.Request.Builder()\r\n                    .url(\"ws://192.168.88.240:8889\")\r\n                    .build()\r\n                val webSocket = client.newWebSocket(request, object : okhttp3.WebSocketListener() {})\r\n                delay(1000)\r\n                webSocket.close(1000, null)\r\n                true\r\n            } catch (e: Exception) {\r\n                false\r\n            }\r\n        }\r\n    }\r\n\r\n    private suspend fun checkTcpServer(): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                val socket = Socket()\r\n                socket.connect(InetSocketAddress(\"192.168.88.240\", 8887), 3000)\r\n                socket.close()\r\n                true\r\n            } catch (e: Exception) {\r\n                false\r\n            }\r\n        }\r\n    }\r\n\r\n    private fun updateStatusIndicators(webSocketOk: Boolean, tcpOk: Boolean) {\r\n        runOnUiThread {\r\n            // Временное решение - Toast, потом заменим на иконки в тулбаре\r\n            val status = \"WS: ${if (webSocketOk) \"\uD83D\uDFE2\" else \"\uD83D\uDD34\"}, TCP: ${if (tcpOk) \"\uD83D\uDFE2\" else \"\uD83D\uDD34\"}\"\r\n            Toast.makeText(this, status, Toast.LENGTH_SHORT).show()\r\n        }\r\n    }\r\n\r\n    private fun autoRegisterIfNeeded() {\r\n        val prefs = getSharedPreferences(\"user\", MODE_PRIVATE)\r\n        if (!prefs.getBoolean(\"registered\", false)) {\r\n            lifecycleScope.launch {\r\n                try {\r\n                    val registrationClient = com.example.aagnar.data.remote.RegistrationClient()\r\n                    val username = prefs.getString(\"username\", \"user_${System.currentTimeMillis()}\") ?: \"user_${System.currentTimeMillis()}\"\r\n                    val result = registrationClient.register(username, \"auto_password\", username)\r\n\r\n                    if (result.contains(\"success\")) {\r\n                        prefs.edit().putBoolean(\"registered\", true).apply()\r\n                        Toast.makeText(this@MainActivity, \"✅ Авторегистрация выполнена\", Toast.LENGTH_SHORT).show()\r\n                    }\r\n                } catch (e: Exception) {\r\n                    // Авторегистрация не обязательна - приложение работает и так\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private fun initViews() {\r\n        drawerLayout = findViewById(R.id.drawerLayout)\r\n        navigationView = findViewById(R.id.navigationView)\r\n        tabLayout = findViewById(R.id.tabLayout)\r\n        viewPager = findViewById(R.id.viewPager)\r\n        toolbar = findViewById(R.id.toolbar)\r\n        menuButton = findViewById(R.id.menuButton)\r\n        searchButton = findViewById(R.id.searchButton)\r\n        addContactButton = findViewById(R.id.addContactButton)\r\n\r\n        setSupportActionBar(toolbar)\r\n    }\r\n\r\n    private fun setupViewPager() {\r\n        val pagerAdapter = MainPagerAdapter(this)\r\n        viewPager.adapter = pagerAdapter\r\n\r\n        TabLayoutMediator(tabLayout, viewPager) { tab, position ->\r\n            tab.text = when (position) {\r\n                0 -> \"Чаты\"\r\n                1 -> \"Контакты\"\r\n                2 -> \"Звонки\"\r\n                else -> \"Чаты\"\r\n            }\r\n        }.attach()\r\n\r\n        menuButton.setOnClickListener {\r\n            drawerLayout.openDrawer(GravityCompat.START)\r\n        }\r\n\r\n        searchButton.setOnClickListener {\r\n            showMessage(\"Поиск\")\r\n        }\r\n\r\n        addContactButton.setOnClickListener {\r\n            showMessage(\"Добавить контакт\")\r\n        }\r\n    }\r\n\r\n    private fun setupNavigation() {\r\n        navigationView.setNavigationItemSelectedListener(this)\r\n    }\r\n\r\n    override fun onNavigationItemSelected(item: MenuItem): Boolean {\r\n        when (item.itemId) {\r\n            R.id.nav_settings -> showFragment(SettingsFragment())\r\n            R.id.nav_profile -> showProfile()\r\n            R.id.nav_about -> showAbout()\r\n            R.id.nav_logout -> logout()\r\n        }\r\n        drawerLayout.closeDrawer(GravityCompat.START)\r\n        return true\r\n    }\r\n\r\n    private fun showFragment(fragment: Fragment) {\r\n        // Скрываем ViewPager и показываем FragmentContainer\r\n        viewPager.visibility = View.GONE\r\n\r\n        val fragmentContainer = findViewById<androidx.fragment.app.FragmentContainerView>(R.id.fragment_container)\r\n        fragmentContainer.visibility = View.VISIBLE\r\n\r\n        // Правильное изменение layout params\r\n        val layoutParams = fragmentContainer.layoutParams as LinearLayout.LayoutParams\r\n        layoutParams.height = LinearLayout.LayoutParams.MATCH_PARENT\r\n        layoutParams.weight = 1f\r\n        fragmentContainer.layoutParams = layoutParams\r\n\r\n        supportFragmentManager.beginTransaction()\r\n            .replace(R.id.fragment_container, fragment)\r\n            .addToBackStack(null)\r\n            .commit()\r\n    }\r\n\r\n\r\n    override fun onBackPressed() {\r\n        if (drawerLayout.isDrawerOpen(GravityCompat.START)) {\r\n            drawerLayout.closeDrawer(GravityCompat.START)\r\n        } else if (isFragmentVisible()) {\r\n            // Если открыт фрагмент, возвращаемся к ViewPager\r\n            returnToViewPager()\r\n        } else {\r\n            super.onBackPressed()\r\n        }\r\n    }\r\n\r\n    private fun isFragmentVisible(): Boolean {\r\n        val fragmentContainer = findViewById<androidx.fragment.app.FragmentContainerView>(R.id.fragment_container)\r\n        return fragmentContainer.visibility == View.VISIBLE\r\n    }\r\n\r\n    private fun returnToViewPager() {\r\n        // Показываем ViewPager и скрываем FragmentContainer\r\n        viewPager.visibility = View.VISIBLE\r\n\r\n        val fragmentContainer = findViewById<androidx.fragment.app.FragmentContainerView>(R.id.fragment_container)\r\n        fragmentContainer.visibility = View.GONE\r\n\r\n        // Правильное изменение layout params\r\n        val layoutParams = fragmentContainer.layoutParams as LinearLayout.LayoutParams\r\n        layoutParams.height = 0\r\n        layoutParams.weight = 0f\r\n        fragmentContainer.layoutParams = layoutParams\r\n\r\n        // Очищаем back stack\r\n        supportFragmentManager.popBackStack()\r\n    }\r\n\r\n    private fun showProfile() {\r\n        showMessage(\"Профиль\")\r\n    }\r\n\r\n    private fun showAbout() {\r\n        android.app.AlertDialog.Builder(this)\r\n            .setTitle(\"AAGNAR v4.2.1\")\r\n            .setMessage(\"P2P клиент, DeeR Tuund (C) 2025\\n\\nGNU GPL-3.0-\")\r\n            .setPositiveButton(\"OK\", null)\r\n            .show()\r\n    }\r\n\r\n    private fun logout() {\r\n        val sessionPrefs = getSharedPreferences(\"session\", Context.MODE_PRIVATE)\r\n        sessionPrefs.edit().putBoolean(\"logged_in\", false).apply()\r\n\r\n        // НЕ очищаем данные аккаунта!\r\n        startActivity(Intent(this, AccountSelectionActivity::class.java))\r\n        finish()\r\n    }\r\n\r\n    private fun showMessage(message: String) {\r\n        Toast.makeText(this, message, Toast.LENGTH_SHORT).show()\r\n    }\r\n\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/aagnar/MainActivity.kt b/app/src/main/java/com/example/aagnar/MainActivity.kt
--- a/app/src/main/java/com/example/aagnar/MainActivity.kt	(revision ed1676b0ea0b31b49a89be6287fed4f646c179bd)
+++ b/app/src/main/java/com/example/aagnar/MainActivity.kt	(date 1761864062987)
@@ -1,4 +1,4 @@
-//AAGNAR  v4.2.1
+//AAGNAR  v4.2.2
 package com.example.aagnar
 
 import android.content.Intent
@@ -249,7 +249,7 @@
 
     private fun showAbout() {
         android.app.AlertDialog.Builder(this)
-            .setTitle("AAGNAR v4.2.1")
+            .setTitle("AAGNAR v4.2.2")
             .setMessage("P2P клиент, DeeR Tuund (C) 2025\n\nGNU GPL-3.0-")
             .setPositiveButton("OK", null)
             .show()
Index: app/src/main/res/layout/activity_account_selection.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n    android:layout_width=\"match_parent\"\r\n    android:layout_height=\"match_parent\"\r\n    android:orientation=\"vertical\"\r\n    android:padding=\"40dp\"\r\n    android:gravity=\"center\"\r\n    android:background=\"@color/white\">\r\n\r\n    <TextView\r\n        android:layout_width=\"wrap_content\"\r\n        android:layout_height=\"wrap_content\"\r\n        android:text=\"AAGNAR v4.2.0\"\r\n        android:textSize=\"24sp\"\r\n        android:textStyle=\"bold\"\r\n        android:layout_marginBottom=\"40dp\" />\r\n\r\n    <Button\r\n        android:id=\"@+id/signInButton\"\r\n        android:layout_width=\"200dp\"\r\n        android:layout_height=\"60dp\"\r\n        android:text=\"Войти в аккаунт\"\r\n        android:textSize=\"16sp\"\r\n        android:layout_marginBottom=\"20dp\" />\r\n\r\n    <Button\r\n        android:id=\"@+id/createAccountButton\"\r\n        android:layout_width=\"200dp\"\r\n        android:layout_height=\"60dp\"\r\n        android:text=\"Создать аккаунт\"\r\n        android:textSize=\"16sp\"\r\n        android:layout_marginBottom=\"40dp\" />\r\n\r\n    <LinearLayout\r\n        android:layout_width=\"wrap_content\"\r\n        android:layout_height=\"wrap_content\"\r\n        android:orientation=\"horizontal\"\r\n        android:gravity=\"center\">\r\n\r\n        <Switch\r\n            android:id=\"@+id/autoLoginSwitch\"\r\n            android:layout_width=\"wrap_content\"\r\n            android:layout_height=\"wrap_content\" />\r\n\r\n        <TextView\r\n            android:layout_width=\"wrap_content\"\r\n            android:layout_height=\"wrap_content\"\r\n            android:text=\"Автоматический вход\"\r\n            android:textSize=\"14sp\"\r\n            android:layout_marginStart=\"10dp\" />\r\n\r\n    </LinearLayout>\r\n\r\n</LinearLayout>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/layout/activity_account_selection.xml b/app/src/main/res/layout/activity_account_selection.xml
--- a/app/src/main/res/layout/activity_account_selection.xml	(revision ed1676b0ea0b31b49a89be6287fed4f646c179bd)
+++ b/app/src/main/res/layout/activity_account_selection.xml	(date 1761864063006)
@@ -10,7 +10,7 @@
     <TextView
         android:layout_width="wrap_content"
         android:layout_height="wrap_content"
-        android:text="AAGNAR v4.2.0"
+        android:text="AAGNAR"
         android:textSize="24sp"
         android:textStyle="bold"
         android:layout_marginBottom="40dp" />
Index: build.gradle.kts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>// Top-level build file where you can add configuration options common to all sub-modules\r\nplugins {\r\n    id(\"com.android.application\") version \"8.2.2\" apply false\r\n    id(\"com.android.library\") version \"8.2.2\" apply false\r\n    id(\"org.jetbrains.kotlin.android\") version \"1.9.23\" apply false\r\n    id(\"org.jetbrains.kotlin.kapt\") version \"1.9.23\" apply false\r\n    id(\"com.google.dagger.hilt.android\") version \"2.51.1\" apply false\r\n    id(\"com.google.devtools.ksp\") version \"1.9.23-1.0.20\" apply false\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/build.gradle.kts b/build.gradle.kts
--- a/build.gradle.kts	(revision ed1676b0ea0b31b49a89be6287fed4f646c179bd)
+++ b/build.gradle.kts	(date 1761864062997)
@@ -1,4 +1,6 @@
-// Top-level build file where you can add configuration options common to all sub-modules
+// Top-level build file where you can add configuration options common
+// to all sub-modules
+// v.4.2.2
 plugins {
     id("com.android.application") version "8.2.2" apply false
     id("com.android.library") version "8.2.2" apply false
Index: app/build.gradle.kts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>plugins {\r\n    id(\"com.android.application\")\r\n    id(\"org.jetbrains.kotlin.android\")\r\n    id(\"com.google.dagger.hilt.android\")\r\n    id(\"org.jetbrains.kotlin.kapt\")\r\n    id(\"com.google.devtools.ksp\")\r\n}\r\n\r\nandroid {\r\n    namespace = \"com.example.aagnar\"\r\n    compileSdk = 34\r\n\r\n    // Добавьте эту строку\r\n    buildFeatures {\r\n        buildConfig = true\r\n    }\r\n\r\n    defaultConfig {\r\n        manifestPlaceholders[\"appAuthRedirectScheme\"] = \"com.example.aagnar\"\r\n        applicationId = \"com.example.aagnar\"\r\n        minSdk = 24\r\n        targetSdk = 34\r\n        versionCode = 4\r\n        versionName = \"4.2.1\"\r\n        testInstrumentationRunner = \"androidx.test.runner.AndroidJUnitRunner\"\r\n\r\n\r\n\r\n        // Кастомные поля для ВСЕХ сборок\r\n        buildConfigField(\"boolean\", \"ENABLE_ANALYTICS\", \"true\")\r\n        buildConfigField(\"long\", \"TIMEOUT_DURATION\", \"30000L\")\r\n        buildConfigField(\"String\", \"APP_VERSION\", \"\\\"${versionName}\\\"\")\r\n\r\n\r\n        ndk {\r\n            abiFilters.add(\"arm64-v8a\")\r\n        }\r\n\r\n        javaCompileOptions {\r\n            annotationProcessorOptions {\r\n                arguments += mapOf(\r\n                    \"room.schemaLocation\" to \"$projectDir/schemas\",\r\n                    \"room.incremental\" to \"true\"\r\n                )\r\n            }\r\n        }\r\n    }\r\n\r\n    buildTypes {\r\n\r\n\r\n        debug {\r\n            // Можно добавить кастомные поля\r\n            buildConfigField(\"String\", \"API_URL\", \"\\\"https://api.debug.com\\\"\")\r\n            buildConfigField(\"boolean\", \"ENABLE_ANALYTICS\", \"false\") // отключаем аналитику в debug\r\n        }\r\n        release {\r\n            buildConfigField(\"String\", \"API_URL\", \"\\\"https://api.prod.com\\\"\")\r\n            buildConfigField(\"boolean\", \"ENABLE_ANALYTICS\", \"true\") // включаем аналитику в release\r\n        }\r\n\r\n\r\n        getByName(\"release\") {\r\n            isMinifyEnabled = true\r\n            isShrinkResources = true\r\n            proguardFiles(\r\n                getDefaultProguardFile(\"proguard-android-optimize.txt\"),\r\n                \"proguard-rules.pro\"\r\n            )\r\n            isCrunchPngs = true\r\n        }\r\n        getByName(\"debug\") {\r\n            isMinifyEnabled = false\r\n            isShrinkResources = false\r\n            isDebuggable = true\r\n            applicationIdSuffix = \".debug\"\r\n        }\r\n    }\r\n\r\n    compileOptions {\r\n        sourceCompatibility = JavaVersion.VERSION_17\r\n        targetCompatibility = JavaVersion.VERSION_17\r\n        isCoreLibraryDesugaringEnabled = true\r\n    }\r\n\r\n    kotlinOptions {\r\n        jvmTarget = \"17\"\r\n        freeCompilerArgs = freeCompilerArgs + listOf(\r\n            \"-Xjvm-default=all\"\r\n        )\r\n    }\r\n\r\n    buildFeatures {\r\n        viewBinding = false\r\n        dataBinding = false\r\n    }\r\n\r\n    packaging {\r\n        resources {\r\n            excludes += \"/META-INF/{AL2.0,LGPL2.1}\"\r\n            excludes += \"META-INF/DEPENDENCIES\"\r\n            excludes += \"META-INF/LICENSE\"\r\n            excludes += \"META-INF/NOTICE\"\r\n            excludes += \"META-INF/androidx.customview_customview.version\"\r\n            excludes += \"META-INF/*.version\"\r\n            excludes += \"META-INF/*.kotlin_module\"\r\n        }\r\n    }\r\n}\r\n\r\nkapt {\r\n    correctErrorTypes = true\r\n}\r\n\r\ndependencies {\r\n    // Core Library Desugaring\r\n    coreLibraryDesugaring(\"com.android.tools:desugar_jdk_libs:2.0.4\")\r\n\r\n    // Kotlin\r\n    implementation(\"org.jetbrains.kotlin:kotlin-stdlib:1.9.23\")\r\n    implementation(\"org.jetbrains.kotlinx:kotlinx-coroutines-android:1.7.3\")\r\n    implementation(\"org.jetbrains.kotlinx:kotlinx-coroutines-core:1.7.3\")\r\n\r\n    // AndroidX Core\r\n    implementation(\"androidx.core:core-ktx:1.12.0\")\r\n    implementation(\"androidx.appcompat:appcompat:1.6.1\")\r\n    implementation(\"androidx.activity:activity-ktx:1.8.2\")\r\n    implementation(\"androidx.fragment:fragment-ktx:1.6.2\")\r\n\r\n    // UI\r\n    implementation(\"com.google.android.material:material:1.11.0\")\r\n    implementation(\"androidx.constraintlayout:constraintlayout:2.1.4\")\r\n\r\n    // Lifecycle\r\n    implementation(\"androidx.lifecycle:lifecycle-viewmodel-ktx:2.7.0\")\r\n    implementation(\"androidx.lifecycle:lifecycle-livedata-ktx:2.7.0\")\r\n    implementation(\"androidx.lifecycle:lifecycle-runtime-ktx:2.7.0\")\r\n\r\n    // Navigation\r\n    implementation(\"androidx.navigation:navigation-fragment-ktx:2.7.6\")\r\n    implementation(\"androidx.navigation:navigation-ui-ktx:2.7.6\")\r\n\r\n    // Camera\r\n    implementation(\"androidx.camera:camera-core:1.3.1\")\r\n    implementation(\"androidx.camera:camera-camera2:1.3.1\")\r\n    implementation(\"androidx.camera:camera-lifecycle:1.3.1\")\r\n    implementation(\"androidx.camera:camera-view:1.3.1\")\r\n    implementation(\"androidx.media:media:1.7.0\")\r\n\r\n    // Network\r\n    implementation(\"com.squareup.okhttp3:okhttp:4.12.0\")\r\n    implementation(\"com.squareup.retrofit2:retrofit:2.9.0\")\r\n    implementation(\"com.squareup.retrofit2:converter-gson:2.9.0\")\r\n\r\n    // Database\r\n    implementation(\"androidx.room:room-runtime:2.6.1\")\r\n    implementation(\"androidx.room:room-ktx:2.6.1\")\r\n    ksp(\"androidx.room:room-compiler:2.6.1\")\r\n\r\n    // ROOM\r\n    // implementation (\"androidx.room:room-runtime:2.6.0\")\r\n    // kapt (\"androidx.room:room-compiler:2.6.0\")\r\n    // implementation (\"androidx.room:room-ktx:2.6.0\")\r\n\r\n    // Security\r\n    implementation(\"androidx.security:security-crypto:1.1.0-alpha06\")\r\n\r\n\r\n    // Preference\r\n    implementation(\"androidx.preference:preference-ktx:1.2.1\")\r\n\r\n    // Document File\r\n    implementation(\"androidx.documentfile:documentfile:1.0.1\")\r\n\r\n    // Hilt\r\n    implementation(\"com.google.dagger:hilt-android:2.51.1\")\r\n    implementation(\"androidx.hilt:hilt-work:1.2.0\")\r\n    kapt(\"com.google.dagger:hilt-compiler:2.51.1\")\r\n\r\n    // ДОБАВЬТЕ ЭТУ СТРОКУ ДЛЯ HILT WORK MANAGER:\r\n    // KAPT\r\n\r\n    kapt(\"androidx.hilt:hilt-compiler:1.2.0\")\r\n\r\n    // WorkManager\r\n    implementation(\"androidx.work:work-runtime-ktx:2.9.0\")\r\n\r\n\r\n    // WebSocket\r\n    implementation(\"org.java-websocket:Java-WebSocket:1.5.3\")\r\n\r\n    // QR Code\r\n    implementation(\"com.google.zxing:core:3.5.2\")\r\n    implementation(\"com.journeyapps:zxing-android-embedded:4.3.0\")\r\n\r\n    // Testing\r\n    testImplementation(\"junit:junit:4.13.2\")\r\n    androidTestImplementation(\"androidx.test.ext:junit:1.1.5\")\r\n    androidTestImplementation(\"androidx.test.espresso:espresso-core:3.5.1\")\r\n\r\n    // JSON\r\n    implementation(\"org.json:json:20231013\")\r\n\r\n    // WebRTC\r\n    implementation(\"io.getstream:stream-webrtc-android:1.1.1\")\r\n    implementation(\"de.hdodenhof:circleimageview:3.1.0\")\r\n    implementation(\"androidx.swiperefreshlayout:swiperefreshlayout:1.1.0\")\r\n    implementation(\"androidx.tracing:tracing-ktx:1.2.0\")\r\n\r\n\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/build.gradle.kts b/app/build.gradle.kts
--- a/app/build.gradle.kts	(revision ed1676b0ea0b31b49a89be6287fed4f646c179bd)
+++ b/app/build.gradle.kts	(date 1761864063016)
@@ -21,7 +21,7 @@
         minSdk = 24
         targetSdk = 34
         versionCode = 4
-        versionName = "4.2.1"
+        versionName = "4.2.2"
         testInstrumentationRunner = "androidx.test.runner.AndroidJUnitRunner"
 
 
